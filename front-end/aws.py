from invoke import task, Collection, Context
import tomllib

with open("pyproject.toml", "rb") as f:
    pyproject = tomllib.load(f)["tool"].get("invoke", {})

aws_config = pyproject.get("aws")


@task()
def aws(ctx: Context):
    print("Creating AWS config")
    if "aws" not in ctx:
        ctx.aws = {}


@task(aws)
def profile(ctx: Context, profile: str | None = None):
    if profile is not None:
        return profile

    profile = aws_config.get("profile")
    ctx.aws["profile"] = profile
    print(f"AWS profile: {profile}")
    return profile


@task(aws, profile)
def account_id(ctx: Context, account_id: str | None = None):
    if account_id is not None:
        return account_id

    account_id = aws_config.get("account_id")
    if account_id is not None:
        print(f"Identified AWS Account ID from pyproject.toml: {account_id}")
        ctx.aws["account_id"] = account_id
        return account_id

    result = ctx.run(
        f"aws sts get-caller-identity --profile {ctx.aws.profile} --query Account --output text",
        hide=True,
    )
    account_id = result.stdout.strip()

    print(f"Identified AWS Account ID from aws-cli: {account_id}")
    ctx.aws["account_id"] = account_id
    return account_id


@task(aws, profile)
def region(ctx: Context, region: str | None = None):
    if region is not None:
        return region

    region = aws_config.get("region")
    if region is not None:
        print(f"Identified AWS Region from pyproject.toml: {region}")
        ctx.aws["region"] = region
        return region

    result = ctx.run(f"aws configure get region --profile {ctx.aws.profile}", hide=True)
    region = result.stdout.strip()

    print(f"Identified AWS Region from aws-cli: {region}")
    ctx.aws["region"] = region
    return region


@task(aws, profile, account_id, region)
def everything(ctx: Context):
    print("All AWS variables should have been generated by now")
